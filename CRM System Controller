namespace CRM.Controllers
{
    [ApiController]
    [Route("Authentication")]
    [Authorize]
    public class CRMController : ControllerBase
    {
        public CRMController(IOptions<JwtOptions> jwtOptions, ILogger<CRMController> logger, AppDbContext dbContext, TokenService tokenService)
        {
            JwtOptions = jwtOptions;
            Logger = logger;
            DbContext = dbContext;
            TokenService = tokenService;
        }
        public AppDbContext DbContext { get; }
        public TokenService TokenService { get; }
        public ILogger<CRMController> Logger { get; }
        public IOptions<JwtOptions> JwtOptions { get; }

        [HttpPost]
        [Route("Login")]
        [AllowAnonymous]
        public async Task<ActionResult> Login(AuthenticationRequest request)
        {

            var ExistingUser = await DbContext.Users.FirstOrDefaultAsync(op => op.UserName == request.UserName);//. will check the Hash Password
            if (ExistingUser is null || !BCrypt.Net.BCrypt.Verify(request.Password, ExistingUser.Password))
                return BadRequest("This Profile is not Exist");

            if (string.IsNullOrEmpty(JwtOptions.Value.SigningKey))
                return BadRequest("Key is Empty");

            var accessToken = TokenService.CreateAccessToken(ExistingUser);
            var refreshToken = TokenService.CreateRefreshToken();

            Logger.LogCritical("something is InValid in LogIn API");

            var expirationDate = DateTime.UtcNow.AddDays(15);
            var attribute = new AccessTokenAttributes
            {
                UserID = ExistingUser.UserID,
                AccessToken = BCrypt.Net.BCrypt.HashString(accessToken),//. for any hacker can't deal with the database
                ExpirationDate = expirationDate,
                IssuedAt = DateTime.UtcNow
            };
            attribute.RefreshToken = refreshToken;

            await DbContext.access.AddAsync(attribute);
            await DbContext.SaveChangesAsync();

            return Ok(new
            {
                accessToken,
                refreshToken
            });
        }
        [HttpPost("RefreshToken")]
        [AllowAnonymous]
        public async Task<ActionResult<TokenService>> RefreshToken(AccessTokenAttributes accessToken)
        {
            var existingToken = await DbContext.access.Include(op => op.users)
                .FirstOrDefaultAsync(op => op.AccessToken == accessToken.AccessToken);
            if (existingToken == null || DateTime.UtcNow < existingToken.ExpirationDate)
                return Unauthorized("Not expired until now");

            var NewAccessToken = TokenService.CreateAccessToken(existingToken.users);
            var NewRefreshToken = TokenService.CreateRefreshToken();

            existingToken.AccessToken = NewAccessToken;
            existingToken.RefreshToken = NewRefreshToken;
            existingToken.ExpirationDate = DateTime.UtcNow.AddDays(15);
            existingToken.IssuedAt = DateTime.UtcNow;

            return Ok(NewRefreshToken);
        }

        [HttpPost]
        [Route("SignUp")]
        [AllowAnonymous]
        public async Task<ActionResult<Users>> SignUp(UserDTO userDTO)
        {
            if (!ModelState.IsValid)
                return BadRequest("Inputs Is Invalid");

            var ExistingUser = await DbContext.Users.FirstOrDefaultAsync(op => op.UserName == userDTO.UserName);
            if (ExistingUser is not null)
                return BadRequest("Sorry!! This UserName Or Password is already Exist");

            var user = new Users
            {
                Email = userDTO.Email,
                Password = BCrypt.Net.BCrypt.HashPassword(userDTO.Password),
                Role = userDTO.Role,
                UserName = userDTO.UserName
            };
            await DbContext.Users.AddAsync(user);
            await DbContext.SaveChangesAsync();
            return Ok(user.UserID);
        }

        [HttpPost("LogOut")]
        [Authorize(Roles = "Admin, Sales team")]
        public async Task<IActionResult> LogOut()
        {
            var userIdClaim = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if(userIdClaim is null || !int.TryParse(userIdClaim, out int userid))
            {
                return Unauthorized("Invalid UserID");
            }

            var ExistingToken = await DbContext.access.FirstOrDefaultAsync(op => op.UserID == userid);
            if (ExistingToken != null)
            {
                DbContext.access.Remove(ExistingToken);
                await DbContext.SaveChangesAsync();
            }

            return Ok("Logged Out Successfully");
        }
        [HttpGet("Users/{id}")]
        [Authorize(Roles = "AdminManager , Sales Teams")]
        public async Task<IActionResult> GetByID(int id)
        {
            var ExistingUser = await DbContext.Users.FirstOrDefaultAsync(op => op.UserID == id);
            if (ExistingUser is null)
                return NotFound($"User With ID: `{id}` is Not Exist");
            return Ok(ExistingUser);
        }

    }

    [ApiController]
    [Route("Customers")]
    [Authorize]
    public class CustomersController(AppDbContext dbContext, ILogger<CustomersController> logger) : ControllerBase
    {
        public AppDbContext DbContext { get; } = dbContext;
        public ILogger<CustomersController> Logger { get; } = logger;

        [HttpGet]
        [Route("Customers")]
        [Authorize(Roles = "AdminManager, Sales Team")]
        public async Task<ActionResult<IEnumerable<Customers>>> GetAllCustomers()
        {
            var Customer = await DbContext.customers.ToListAsync();
            return Ok(Customer);
        }
        
        [HttpGet]
        [Route("Get/{id}")]
        [Authorize(Roles = "AdminManager, Sales Team")]
        public async Task<ActionResult>GetByID(int id)
        {
            var ExitingCustomer = await DbContext.customers.FirstOrDefaultAsync(op => op.CustomerID == id);
            if (ExitingCustomer is null)
                return NotFound($"Customer With ID : `{id}` is not Exist");
            return Ok(ExitingCustomer);
        }

        [HttpPost]
        [Route("Customers")]
        [Authorize(Roles = "AdminManager, Sales Team")]
        public async Task<ActionResult<int>> CreateCustomer(Customers customer)
        {
            if (!ModelState.IsValid)
                return BadRequest("Inputs is InValid");
            logger.LogCritical("");
            var ExistingCustomer = await DbContext.customers.FirstOrDefaultAsync(op => op.Name == customer.Name);
            if (ExistingCustomer is not null)
                return BadRequest("this Name is Already Exist");
            
            await DbContext.customers.AddAsync(customer);
            await DbContext.SaveChangesAsync();
            return Ok(customer.CustomerID);
        }

        [HttpPut]
        [Route("Customers/{id}")]
        [Authorize(Roles = "AdminManager, Sales Team")]
        public async Task<ActionResult> Update(int id, Customers customer)
        {
            if (!ModelState.IsValid)
                return BadRequest("Inputs is InValid");

            var ExistingCustomer = await DbContext.customers.FirstOrDefaultAsync(op => op.CustomerID == id);
            if (ExistingCustomer is null)
                return NotFound($"Customer With ID : `{id}` is not Exist");

            ExistingCustomer.Email = customer.Email;
            ExistingCustomer.Name = customer.Name;
            ExistingCustomer.Company = customer.Company;
            DbContext.customers.Update(ExistingCustomer);
            await DbContext.SaveChangesAsync();
            return Ok("Done!");
        }

        [HttpDelete]
        [Route("Customers/{id}")]
        [Authorize(Roles = "AdminManager, Sales Team")]
        public async Task<ActionResult> Delete(int id)
        {
            var ExitingCustomer = await DbContext.customers.FirstOrDefaultAsync(op => op.CustomerID == id);
            if (ExitingCustomer is null)
                return NotFound($"Customer With ID : `{id}` is not Exist");
            DbContext.customers.Remove(ExitingCustomer);
            await DbContext.SaveChangesAsync();
            return Ok("Done!");
        }
    }

    [ApiController]
    [Route("Tasks")]
    [Authorize]
    public class TasksController (AppDbContext dbContext, ILogger<Tasks> logger) : ControllerBase
    {
        public AppDbContext DbContext { get; } = dbContext;
        public ILogger<Tasks> Logger { get; } = logger;

        [HttpGet]
        [Route("Tasks")]
        [Authorize(Roles = "AdminManager, Sales Team")]
        public async Task<ActionResult<IEnumerable<Tasks>>> GetAllTasks()
        {
            var ExistingTask = await DbContext.task.ToListAsync();
            return Ok(ExistingTask);
        }

        [HttpGet]
        [Route("Tasks/{id}")]
        [Authorize(Roles = "AdminManager, Sales Team")]
        public async Task<ActionResult> GetByID(int id)
        {
            var ExistingTask = await DbContext.task.FirstOrDefaultAsync(op => op.TaskID == id);
            if (ExistingTask == null)
                return BadRequest($"Task with ID : `{id}` is not Exist");
            return Ok(ExistingTask);
        }

        [HttpPost]
        [Route("Tasks")]
        [Authorize(Roles = "AdminManager, Sales Team")]
        public async Task<ActionResult<int>> CreateTask(Tasks tasks)
        {
            if (!ModelState.IsValid)
                return BadRequest("Inputs is InValid");

            var ExistingTask = await DbContext.task.FirstOrDefaultAsync(op => op.TaskID == tasks.TaskID);
            if (ExistingTask is not null)
                return BadRequest($"Task is already Exist");
            await DbContext.task.AddAsync(tasks);
            await DbContext.SaveChangesAsync();
            return Ok("Done!");
        }

        [HttpPut]
        [Route("Tasks/{id}")]
        [Authorize(Roles = "AdminManager , Sales Team")]
        public async Task<ActionResult> UpdateTask(int id, Tasks tasks)
        {
            if (!ModelState.IsValid)
                return BadRequest("Inputs Is InValid");

            var ExistingTask = await DbContext.task.FirstOrDefaultAsync(op => op.TaskID == id);
            if (ExistingTask is null)
                return NotFound("Task is not Exist");

            ExistingTask.Status = tasks.Status;
            ExistingTask.Description = tasks.Description;
            ExistingTask.DueTime = tasks.DueTime;
            ExistingTask.Title = tasks.Title;
            DbContext.task.Update(ExistingTask);
            await DbContext.SaveChangesAsync();
            return Ok("Done!");
        }

        [HttpDelete]
        [Route("Task/{id}")]
        [Authorize(Roles = "AdminManager, Sales Team")]
        public async Task<ActionResult> RemoveTask(int id)
        {
            var ExistingTask = await DbContext.task.FirstOrDefaultAsync(op => op.TaskID == id);
            if (ExistingTask is null)
                return NotFound("Task is not Exist");
            DbContext.task.Remove(ExistingTask);
            await DbContext.SaveChangesAsync();
            return Ok("Done!");
        }
    }

    [ApiController]
    [Route("Sales")]
    [Authorize]
    public class SalesController(AppDbContext dbContext, ILogger<SalesController> logger) : ControllerBase
    {
        public AppDbContext DbContext { get; } = dbContext;
        public ILogger<SalesController> Logger { get; } = logger;

        [HttpGet]
        [Route("Sales")]
        [Authorize("AdminManager")]
        public async Task<ActionResult> GetSales()
        {
            var ExistingSale = await DbContext.Sale.ToListAsync();
            if (ExistingSale is null)
                return NotFound("Empty!!");
            return Ok(ExistingSale);
        }

        [HttpPost]
        [Route("Sales")]
        [Authorize(Roles = "AdminManager")]
        public async Task<ActionResult<int>> CreateSale(Sales sales)
        {
            if (!ModelState.IsValid)
                return BadRequest("Inputs is Invalid");

            var ExistingSale = await DbContext.Sale.FirstOrDefaultAsync(op => op.SaleID == sales.SaleID);
            if (ExistingSale is not null)
                return BadRequest("These Inputs is Already Exist");

            await DbContext.Sale.AddAsync(sales);
            await DbContext.SaveChangesAsync();
            return Ok("Done!");
        }   
    }
}
